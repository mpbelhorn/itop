#!/bin/python
# -*- coding: utf-8 -*-
from __future__ import print_function
import argparse
import numpy as np
from numpy import arange
import datetime
import itop
import os
import cPickle as pickle
import sys
import zlib

parser = argparse.ArgumentParser(description='Scan a test mirror.')
parser.add_argument('--inputs', dest='input_range', nargs=2,
    metavar=('FIRST', 'LAST'), type=float, default=[-100, -202],
    help='Specify beam input positions in mm.')
parser.add_argument('--step', metavar='SIZE', dest='step_size', type=float,
    default=5.0, help='Specify mirror sampling step size in mm')
parser.add_argument('--output', metavar='PATH', type=str,
    help='Path to output gz data file')
parser.add_argument('--home', action='store_true', default=False,
    help='Home the stages before taking data')
parser.add_argument('--align', action='store_true', default=False,
    help='Re-compute the tracker alignment to the beams.')
parser.add_argument('--alt', action='store_true', default=False,
    help='Run scan on alternate mirror.')
parser.add_argument('--start', dest='start_point', nargs=3,
    metavar=('X', 'Y', 'Z'), type=float,
    help='Start first scan at position [X,Y,Z].')

args = parser.parse_args()

profiler = itop.Profiler('/dev/ttyUSB0')
esp_300 = itop.StageController('/dev/ttyUSB1',
    limits=[250.0, [-45.0, 190.0], 125.0])
esp_301 = itop.StageController('/dev/ttyUSB2',
    limits=[125.0, [0.0, 25.0], [-95.0, 125.0]])
beam_monitor = itop.Photodiode('/dev/itop_lds1000')

mirror_axis_id = 2 if args.alt else 0
mirror_stage = esp_300.axes[mirror_axis_id]
profiler_rotation_stage = esp_300.axes[1]

tracker = itop.Tracker(esp_301, profiler_rotation_stage,
    profiler, beam_monitor, home=args.home, check=True)

mirror_stage.power_on()
if args.home or args.alt:
  mirror_stage.go_to_home(wait=True)

if args.alt:
  mirror_stage.home_position(-99.7)

alignment_path = itop.data_path('alignment/latest.gz')
if args.align:
  calibration = itop.data_path('alignment/latest.cfg')
  alignment_data = itop.Alignment(calibration)
  tracker.devices['driver'].home()
  alignment_data.align(tracker, home=True)
  itop.utilities.save_object(alignment_data, alignment_path)

instrument = itop.Instrument(tracker, mirror_stage, alignment_path)
run_starting_time = datetime.datetime.now().isoformat()

if args.output is None:
  args.output = itop.data_path('runs/{}-data.gz'.format(run_starting_time))

mirror_range = instrument.alignment.mirror_limits(args.input_range)
mirror_step = args.step_size
if args.input_range[1] > args.input_range[0]:
  mirror_step = -args.step_size

print('Starting data run at {}.'.format(run_starting_time))
print('===============')
print(instrument.sample_position(
    mirror_range[0], start_point=args.start_point))
instrument.save_data(args.output)

for mirror_position_x in np.append(
    arange(
        mirror_range[0] + mirror_step,
        mirror_range[1], mirror_step),
    mirror_range[1]):
  print(instrument.sample_position(mirror_position_x))
  instrument.save_data(args.output)

